// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/batch-05/gin-template/entity"
	mock "github.com/stretchr/testify/mock"
)

// BorrowingRepository is an autogenerated mock type for the BorrowingRepository type
type BorrowingRepository struct {
	mock.Mock
}

// AddBorrowBook provides a mock function with given fields: borrow
func (_m *BorrowingRepository) AddBorrowBook(borrow *entity.BorrowingRecord) (*entity.BorrowingRecord, error) {
	ret := _m.Called(borrow)

	var r0 *entity.BorrowingRecord
	if rf, ok := ret.Get(0).(func(*entity.BorrowingRecord) *entity.BorrowingRecord); ok {
		r0 = rf(borrow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BorrowingRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.BorrowingRecord) error); ok {
		r1 = rf(borrow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordById provides a mock function with given fields: id
func (_m *BorrowingRepository) GetRecordById(id int) (*entity.BorrowingRecord, error) {
	ret := _m.Called(id)

	var r0 *entity.BorrowingRecord
	if rf, ok := ret.Get(0).(func(int) *entity.BorrowingRecord); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BorrowingRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBorrowBook provides a mock function with given fields: record
func (_m *BorrowingRepository) ReturnBorrowBook(record *entity.BorrowingRecord) (*entity.BorrowingRecord, error) {
	ret := _m.Called(record)

	var r0 *entity.BorrowingRecord
	if rf, ok := ret.Get(0).(func(*entity.BorrowingRecord) *entity.BorrowingRecord); ok {
		r0 = rf(record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.BorrowingRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.BorrowingRecord) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowingRepository creates a new instance of BorrowingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowingRepository(t mockConstructorTestingTNewBorrowingRepository) *BorrowingRepository {
	mock := &BorrowingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
